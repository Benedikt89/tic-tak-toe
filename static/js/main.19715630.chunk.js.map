{"version":3,"sources":["components/Main.module.css","assets/images/Spinner.svg","components/Login/FormControl.module.css","game/gameLogic.ts","utils/errorLogger.ts","authorisation/user-api.ts","authorisation/actions.ts","game/api.ts","game/actions.ts","game/reducer.ts","authorisation/authReducer.ts","redux/store.ts","components/Header/Header.tsx","components/Login/FormElements/validators.ts","components/Footer/Footer.tsx","game/selectors.ts","components/Game/FieldElement.tsx","components/Game/PopUp.tsx","components/Game/gameScreen.tsx","game/api-actions.ts","authorisation/selectors.ts","components/Login/FormElements/FormsControls.tsx","components/Login/LoginForm.tsx","components/Login/Login.tsx","components/Common/Preloader.tsx","components/Main.tsx","App.tsx","serviceWorker.ts","index.tsx","components/Footer/Footer.module.css","components/Header/Header.module.css","assets/icons/cross.svg","assets/icons/zero.svg","components/Game/FieldElement.module.css"],"names":["module","exports","getWinner","fields","turns","winner","newFields","forEach","combo","index","a","status","b","c","win","usedInWin","APIerrorLogger","error","response","console","warn","log","data","headers","message","request","instance","axios","create","baseURL","withCredentials","LoginError","statusCode","Error","authorisationAPI","post","res","statusText","get","then","catch","err","_checkIsAuth","type","checkIsAuth","dispatch","async","gameDataApi","END_GAME","_fetchSuccess","_turnCross","_turnZero","_toggleIsFetching","_toggleIsGameFrozen","_setError","resetCount","endGame","_endGame","fieldCreator","Array","map","el","id","initialState","player1Score","winsScore","failsScore","drawsScore","player2Score","isFrozen","isFetching","currentTurn","demomode","reducer","state","action","isAuth","userId","userName","authorisationReducer","userInfo","rootReducer","combineReducers","auth","form","formReducer","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","Header","min","max","props","className","style","headerWrapper","navContainer","onClick","item","logOut","alert","inform","Footer","footerWrapper","container","containerRow","containerCol","getFields","getTurns","getCurrentTurn","getIsFetching","getIsFrozen","getAppError","getScore","GameField","socketBlur","clickSuccess","clickTimeoutActive","setState","setTimeout","cx","classNames","bind","classNameForWrapper","buttonWrapper","success","this","field","winHorisontal","winVertical","win90deg","winMinus90deg","classNameCell","itemCell","cross","zero","onUserTurn","alt","src","crossImg","zeroImg","React","Component","PopUpScore","title","score","closePopUp","popUpWrapper","connect","onUserMove","pressedField","getState","ifDemoMode","f","isUserWinner","computerMove","Math","floor","random","length","isAIwinner","Promise","all","dataAsString","JSON","stringify","useState","isPopUpOpen","setPopUpOpen","gameButtons","key","showStats","val","bgImage","fieldSizeWrapper","row","icon","scoreButton","PopUp","gameWrapper","oneToOneSizer","gameGrid","getIsAuth","renderField","input","label","meta","touched","warning","fieldWrapper","errorMessage","required","value","undefined","minLength4","maxLength15","reduxForm","handleSubmit","pristine","submitting","formControl","onSubmit","Field","name","component","validate","mainErrorMessage","disabled","LoginPage","logIn","formData","username","password","Preloader","justifyContent","alignItems","display","height","width","preloader","Main","fetchGameData","prevProps","prevState","snapshot","appError","setDemoMode","mainWrapper","alertBtn","Login","ComposedComponent","resAsString","parse","config","url","stopSubmit","_error","_setDemoMode","withRouter","App","basename","process","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.19715630.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Main_container__1ISpx App_container__NzRnC\",\"mainWrapper\":\"Main_mainWrapper__3pKoD\",\"gameWrapper\":\"Main_gameWrapper__1zxTR\",\"oneToOneSizer\":\"Main_oneToOneSizer__2brwo\",\"gameGrid\":\"Main_gameGrid__3I7is\",\"warning\":\"Main_warning__2iscZ\",\"alertBtn\":\"Main_alertBtn__2sM4u Main_warning__2iscZ\",\"win\":\"Main_win__3C6bX\",\"fieldSizeWrapper\":\"Main_fieldSizeWrapper__3z0rQ Main_container__1ISpx App_container__NzRnC\",\"row\":\"Main_row__3jGTd App_row__3FhQM App_container__NzRnC\",\"icon\":\"Main_icon__1Gs9a\",\"popUpWrapper\":\"Main_popUpWrapper__k8Zhn\",\"scoreButton\":\"Main_scoreButton__36Q6m\"};","module.exports = __webpack_public_path__ + \"static/media/Spinner.3e6608c5.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControl_formControl__2uSMi\",\"fieldWrapper\":\"FormControl_fieldWrapper__2UzPn\",\"error\":\"FormControl_error__2u7Ql\",\"mainErrorMessage\":\"FormControl_mainErrorMessage__39f-L\",\"errorMessage\":\"FormControl_errorMessage__14dQQ FormControl_mainErrorMessage__39f-L\",\"success\":\"FormControl_success__1R0Z-\"};","import {I_fieldItem, I_winnerCheck} from \"../types/types\";\r\n\r\nlet trippleCheck = (a: string | null, b: string | null, c: string | null,): boolean => {\r\n    if (a !== null) {\r\n        if (b !== null) {\r\n            if (c !== null) {\r\n                return a === b && b === c;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n};\r\n\r\nexport const getWinner = (fields: Array<I_fieldItem>, turns: number): I_winnerCheck => {\r\n    //create winning combos\r\n    const winningCombos = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6]\r\n    ];\r\n    let winner = null;\r\n    let newFields = [...fields];\r\n\r\n    //check if in array exist winning combo\r\n    winningCombos.forEach((combo, index) => {\r\n        if (trippleCheck(fields[combo[0]].status, fields[combo[1]].status, fields[combo[2]].status)) {\r\n            winner = fields[combo[0]].status === \"CROSS\" ? 'USER' : 'COMPUTER';\r\n            let win = () => {\r\n                if (index <= 2) {\r\n                    return 'HORIZONTAL'\r\n                } else if (index >= 3 && index <= 5) {\r\n                    return 'VERTICAL'\r\n                } else if (index === 6) {\r\n                    return 'DRAW+90'\r\n                } else return 'DRAW-90'\r\n            };\r\n            newFields[combo[0]].usedInWin = win();\r\n            newFields[combo[1]].usedInWin = win();\r\n            newFields[combo[2]].usedInWin = win();\r\n        }\r\n    });\r\n    return {\r\n        winner: winner ? winner : (turns >= 9 ? \"DRAW\" : winner),\r\n        fields: fields\r\n    };\r\n};\r\n","export const APIerrorLogger = (error: any) => {\r\n    if (error.response) {\r\n        console.warn('response Error');\r\n        console.log(error.response.data);\r\n        console.log(error.response.status);\r\n        console.log(error.response.headers);\r\n        if (error.response.data.message) {\r\n            return error.response.data\r\n        }\r\n    } else if (error.request) {\r\n        console.warn('request Error');\r\n        console.warn(error.request);\r\n    } else {\r\n        console.warn('Unknown Error', error.message);\r\n    }\r\n}","import axios from \"axios\";\r\nimport {APIerrorLogger} from \"../utils/errorLogger\";\r\nimport {I_logInData} from \"./actions\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"http://localhost:8421/\",\r\n    withCredentials: true\r\n});\r\n\r\nclass LoginError extends Error {\r\n    constructor(message: string, public statusCode: number) {\r\n        super(message);\r\n    }\r\n}\r\n\r\nexport const authorisationAPI = {\r\n    async logIn(data: I_logInData) {\r\n        try {\r\n            let res = await instance.post('api.authentication.signin', data);\r\n            return res.data;\r\n        } catch (err) {\r\n            if (err.response.status === 401){\r\n                throw new LoginError(err.response.statusText, 401);\r\n            } else {\r\n                APIerrorLogger(err);\r\n                throw new Error(\"Some Error Occurred\");\r\n            }\r\n        }\r\n    },\r\n    async logOut() {\r\n        try {\r\n            let res = await instance.get('api.authentication.signout');\r\n            if (res.status >= 200 && res.status < 300) {\r\n                return res.data;\r\n            }\r\n        } catch (err) {\r\n            APIerrorLogger(err);\r\n            throw new Error('unknown Error');\r\n        }\r\n    },\r\n    checkAuth() {\r\n        return instance.get('api.authentication.check')\r\n            .then((res) => {\r\n                return res.statusText;\r\n            }).catch(err => {\r\n                if (err.response.status === 401){\r\n                    throw new LoginError(err.response.statusText, 401);\r\n                } else {\r\n                    APIerrorLogger(err);\r\n                    throw new Error(\"Some Error Occurred\");\r\n                }\r\n            })\r\n    }\r\n};","import {ThunkDispatch} from \"redux-thunk\";\r\nimport {authorisationAPI} from \"./user-api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nexport const LOGIN_SUCCESS = 'users/LOGIN_SUCCESS';\r\nexport const LOGOUT_SUCCESS = 'users/LOGOUT_SUCCESS';\r\nexport const CHECK_IS_AUTH = 'users/CHECK_IS_AUTH';\r\n\r\nexport interface I_logInData {username: string, password: string}\r\n\r\nexport interface I_userInfo {\r\n    userId?: null | string,\r\n    userName: null | string,\r\n}\r\nexport interface I_userState extends I_userInfo {\r\n    isAuth: boolean,\r\n    error: string | null\r\n}\r\nexport type usersReducerActions = I_authorisationSuccess | I_logOutSuccess | I_checkIsAuth\r\n\r\ninterface I_authorisationSuccess {\r\n    type: typeof LOGIN_SUCCESS,\r\n    status: boolean,\r\n    userInfo: I_userInfo\r\n}\r\ninterface I_logOutSuccess {\r\n    type: typeof LOGOUT_SUCCESS,\r\n}\r\ninterface I_checkIsAuth {\r\n    type: typeof CHECK_IS_AUTH, status: boolean, message: string\r\n}\r\n\r\n//INTERNAL ACTIONS\r\nexport const _authorisationSuccess = (status: boolean, userInfo: I_userInfo): I_authorisationSuccess =>\r\n    ({type: LOGIN_SUCCESS, status, userInfo});\r\n\r\nexport const _logOutSuccess = (): I_logOutSuccess =>\r\n    ({type: LOGOUT_SUCCESS});\r\n\r\nexport const _checkIsAuth = (status: boolean, message: string): I_checkIsAuth =>\r\n    ({type: CHECK_IS_AUTH, status, message});\r\n\r\n//EXTERNAL ACTIONS\r\nexport const logOut = () => async (dispatch: ThunkDispatch<{}, {}, usersReducerActions>) => {\r\n    await authorisationAPI.logOut();\r\n    dispatch(_logOutSuccess());\r\n};\r\nexport const logIn = (data: I_logInData) => async (dispatch: ThunkDispatch<{}, {}, usersReducerActions>) => {\r\n    try {\r\n        let res = await authorisationAPI.logIn(data);\r\n        dispatch(_authorisationSuccess(true, res.userInfo ? res.userInfo : 'Stranger'));\r\n    } catch (err) {\r\n        let message = err.message.length > 0 ? err.message : \"some error\";\r\n        dispatch(stopSubmit('logIn', {_error: message}))\r\n    }\r\n};\r\nexport const checkIsAuth = () => async (dispatch: ThunkDispatch<{}, {}, usersReducerActions>) => {\r\n    try {\r\n        await authorisationAPI.checkAuth();\r\n        dispatch(_checkIsAuth(true, 'Authorisation Success'));\r\n    } catch (err) {\r\n        let message = err.message ? err.message : 'Authorisation Failed';\r\n        dispatch(_checkIsAuth(false, message));\r\n    }\r\n};\r\n","import axios from \"axios\";\r\nimport {APIerrorLogger} from \"../utils/errorLogger\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"http://localhost:8421/\",\r\n    withCredentials: true\r\n});\r\n\r\nexport const gameDataApi = {\r\n    fetchData () {\r\n        return instance.get('api.user.getstate')\r\n            .then(res => {\r\n                return res.data\r\n            })\r\n            .catch((err)=> {\r\n                APIerrorLogger(err);\r\n                if (err.response.status === 500) {\r\n                    return null;\r\n                } else {\r\n                    throw err;\r\n                }\r\n            })\r\n    },\r\n    postData (data:string) {\r\n        return instance.post('api.user.setstate', data)\r\n            .then(res => {\r\n                return res.data\r\n            })\r\n            .catch((err)=> {\r\n                APIerrorLogger(err);\r\n                throw err;\r\n            })\r\n    }\r\n};","import {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppStateType} from \"../redux/store\";\r\nimport {I_dataToStore, I_fieldItem, I_winner} from \"../types/types\";\r\nimport {getWinner} from \"./gameLogic\";\r\nimport {postGameData} from \"./api-actions\";\r\n\r\ntype GetStateType = () => AppStateType\r\n\r\nexport const RESET_COUNT = 'game/RESET_COUNT';\r\nexport const SET_TURN = 'game/SET_TURN';\r\nexport const SET_AI_TURN = 'game/SET_AI_TURN';\r\nexport const END_GAME = 'game/SET_END_GAME';\r\nexport const SET_IS_GAME_FROZEN = 'game/SET_IS_GAME_FROZEN';\r\n\r\nexport const SET_FETCH_SUCCESS = 'app/SET_FETCH_SUCCESS';\r\nexport const SET_IS_FETCHING = 'app/SET_IS_FETCHING';\r\nexport const SET_ERROR = 'app/SET_ERROR';\r\nexport const SET_DEMOMODE = 'app/SET_DEMOMODE';\r\n\r\nexport type I_actions =\r\n    I_resetCount | I_turnCross | I_turnZero |\r\n    I_toggleIsFetching | I_isGameFrozen | I_isGameFrozen |\r\n    I_fetchSuccess | I_endGame | I_setError |\r\n    I_setDemomode\r\n\r\n//interfaces\r\ninterface I_resetCount {\r\n    type: typeof RESET_COUNT,\r\n}\r\n\r\ninterface I_fetchSuccess {\r\n    type: typeof SET_FETCH_SUCCESS,\r\n    data: any\r\n}\r\n\r\ninterface I_turnCross {\r\n    type: typeof SET_TURN,\r\n    newFields: Array<I_fieldItem>\r\n}\r\n\r\ninterface I_turnZero {\r\n    type: typeof SET_AI_TURN,\r\n    newFields: Array<I_fieldItem>\r\n}\r\n\r\ninterface I_endGame {\r\n    type: typeof END_GAME,\r\n    winner: I_winner,\r\n    fields: Array<I_fieldItem>\r\n}\r\n\r\ninterface I_toggleIsFetching {\r\n    type: typeof SET_IS_FETCHING,\r\n    status: boolean\r\n}\r\n\r\ninterface I_isGameFrozen {\r\n    type: typeof SET_IS_GAME_FROZEN,\r\n    status: boolean\r\n}\r\n\r\ninterface I_setError {\r\n    type: typeof SET_ERROR,\r\n    message: null | string\r\n}\r\n\r\ninterface I_setDemomode {\r\n    type: typeof SET_DEMOMODE,\r\n    status: boolean\r\n}\r\n\r\n//Internal ACTIONS CREATORS\r\nexport const _fetchSuccess = (data: I_dataToStore): I_fetchSuccess => ({ type: SET_FETCH_SUCCESS, data});\r\n\r\nexport const _turnCross = (newFields: Array<I_fieldItem>): I_turnCross => ({ type: SET_TURN, newFields});\r\n\r\nexport const _turnZero = (newFields: Array<I_fieldItem>): I_turnZero => ({ type: SET_AI_TURN, newFields});\r\n\r\nexport const _toggleIsFetching = (status: boolean): I_toggleIsFetching => ({ type: SET_IS_FETCHING, status});\r\n\r\nexport const _toggleIsGameFrozen = (status: boolean): I_isGameFrozen => ({ type: SET_IS_GAME_FROZEN, status});\r\n\r\nexport const _setError = (message: string | null): I_setError => ({ type: SET_ERROR, message});\r\n\r\nexport const _endGame = (winner: I_winner, fields: Array<I_fieldItem>): I_endGame => ({ type: END_GAME, winner, fields });\r\n\r\nexport const resetCount = (): I_resetCount => ({type: RESET_COUNT});\r\n\r\nexport const _setDemoMode = (status: boolean): I_setDemomode => ({type: SET_DEMOMODE, status});\r\n\r\n//EXTERNAL ACTIONS\r\nexport const endGame = (winner: I_winner, fields: Array<I_fieldItem>) =>\r\n    (dispatch: ThunkDispatch<{}, {}, I_actions>) => {\r\n        dispatch(_endGame(winner, fields));\r\n    };\r\nexport const setDemoMode = (status: boolean) => (dispatch: ThunkDispatch<{}, {}, I_actions>) => {\r\n    dispatch(_setDemoMode(status));\r\n};\r\n\r\nexport const onUserMove = (pressedField: I_fieldItem) =>\r\n    async (dispatch: ThunkDispatch<{}, {}, any>, getState: GetStateType) => {\r\n        let ifDemoMode = getState().reducer.demomode;\r\n        //freezing game for block user actions during requests\r\n        dispatch(_toggleIsGameFrozen(true));\r\n\r\n        //create copy of fields and set field satus to cross\r\n        let newFields: Array<I_fieldItem> = getState().reducer.fields.map((f: I_fieldItem) => {\r\n            if (f.id === pressedField.id && !f.status) {\r\n                return {...f, status: 'CROSS'};\r\n            } else return f;\r\n        });\r\n\r\n        //setting new fields on user move\r\n        dispatch(_turnCross(newFields));\r\n\r\n        //timeout for imitation of computer is thinking\r\n        setTimeout(async () => {\r\n            let isUserWinner = getWinner(newFields, getState().reducer.turns);\r\n\r\n            //if user is not winner making move for AI\r\n            if (!isUserWinner.winner) {\r\n\r\n                //Generate random number\r\n                let computerMove = Math.floor(Math.random() * 8);\r\n                let newFields = [...getState().reducer.fields];\r\n\r\n                //check is field in array free to set status\r\n                for (computerMove; computerMove < newFields.length; computerMove++) {\r\n                    if (newFields[computerMove].status === null) {\r\n                        newFields[computerMove].status = \"ZERO\";\r\n                        break;\r\n                    }\r\n                //if array ends, reset computerMove value to run from start\r\n                    if(computerMove === 8) {\r\n                        computerMove = -1;\r\n                    }\r\n                }\r\n\r\n                dispatch(_turnZero(newFields));\r\n\r\n                //check for AI wins\r\n                let isAIwinner = getWinner( getState().reducer.fields, getState().reducer.turns);\r\n\r\n                if (isAIwinner.winner) {\r\n                    dispatch(endGame(isAIwinner.winner, isAIwinner.fields));\r\n                }\r\n            } else {\r\n                dispatch(endGame(isUserWinner.winner, isUserWinner.fields))\r\n            }\r\n            if (!ifDemoMode) {\r\n                await Promise.all([dispatch(postGameData())]);\r\n            }\r\n            dispatch(_toggleIsGameFrozen(false));\r\n        }, 1000)\r\n    };","import {I_gameState} from \"../types/types\";\r\nimport {\r\n    END_GAME,\r\n    I_actions, RESET_COUNT,\r\n    SET_AI_TURN, SET_DEMOMODE, SET_ERROR, SET_FETCH_SUCCESS,\r\n    SET_IS_FETCHING,\r\n    SET_IS_GAME_FROZEN, SET_TURN,\r\n} from \"./actions\";\r\n\r\nlet fieldCreator = () =>\r\n    [...Array(9)].map((el, index) => ({id: index, status: null, usedInWin: null}));\r\n\r\nconst initialState: I_gameState = {\r\n    fields: fieldCreator(),\r\n    player1Score: {\r\n        winsScore: 0,\r\n        failsScore: 0,\r\n        drawsScore: 0\r\n    },\r\n    player2Score: {\r\n        winsScore: 0,\r\n        failsScore: 0,\r\n        drawsScore: 0\r\n    },\r\n    turns: 0,\r\n    isFrozen: false,\r\n    isFetching: false,\r\n    winner: null,\r\n    currentTurn: \"CROSS\",\r\n    error: null,\r\n    demomode: false\r\n};\r\n\r\nconst reducer = (state: I_gameState = initialState, action: I_actions) => {\r\n    switch (action.type) {\r\n        //setting fetching and frozen status\r\n        case SET_IS_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.status,\r\n            };\r\n        case SET_ERROR:\r\n            return {\r\n                ...state,\r\n                error: action.message\r\n            };\r\n        case SET_DEMOMODE:\r\n            return {\r\n                ...state,\r\n                demomode: action.status\r\n            };\r\n        case SET_IS_GAME_FROZEN:\r\n            return {\r\n                ...state,\r\n                isFrozen: action.status,\r\n            };\r\n        //adding fetched game data to state\r\n        case SET_FETCH_SUCCESS:\r\n            return {\r\n                ...state,\r\n                ...action.data\r\n            };\r\n        case SET_TURN:\r\n            return {\r\n                ...state,\r\n                turns: state.turns + 1,\r\n                currentTurn: 'ZERO',\r\n                fields: action.newFields\r\n            };\r\n        case END_GAME:\r\n            switch (action.winner) {\r\n                case \"COMPUTER\":\r\n                    return {\r\n                        ...state,\r\n                        player1Score: {...state.player1Score, failsScore: state.player1Score.failsScore + 1},\r\n                        player2Score: {...state.player2Score, winsScore: state.player2Score.winsScore + 1},\r\n                        winner: action.winner,\r\n                        currentTurn: null\r\n                    };\r\n                case \"DRAW\":\r\n                    return {\r\n                        ...state,\r\n                        player1Score: {...state.player1Score, drawsScore: state.player1Score.drawsScore + 1},\r\n                        player2Score: {...state.player2Score, drawsScore: state.player2Score.drawsScore + 1},\r\n                        winner: action.winner,\r\n                        currentTurn: null\r\n                    };\r\n                case \"USER\":\r\n                    return {\r\n                        ...state,\r\n                        player1Score: {...state.player1Score, winsScore: state.player1Score.winsScore + 1},\r\n                        player2Score: {...state.player2Score, failsScore: state.player2Score.failsScore + 1},\r\n                        winner: action.winner,\r\n                        currentTurn: null\r\n                    };\r\n                default:\r\n                    return state;\r\n            }\r\n        case RESET_COUNT:\r\n            return {\r\n                ...state,\r\n                turns: 0,\r\n                fields: fieldCreator(),\r\n                winner: null,\r\n                currentTurn: \"CROSS\"\r\n            };\r\n        case SET_AI_TURN:\r\n            return {\r\n                ...state,\r\n                fields: action.newFields,\r\n                turns: state.turns + 1,\r\n                currentTurn: 'CROSS'\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n\r\nexport default reducer;","import {CHECK_IS_AUTH, I_userState, LOGIN_SUCCESS, LOGOUT_SUCCESS, usersReducerActions} from \"./actions\";\r\n\r\nconst initialState: I_userState = {\r\n    isAuth: false,\r\n    //for multiply users information\r\n    userId: null,\r\n    userName: null,\r\n    error: null\r\n};\r\n\r\nconst authorisationReducer = (state: I_userState = initialState, action: usersReducerActions) => {\r\n    switch (action.type) {\r\n        case LOGIN_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isAuth: action.status,\r\n                userName: action.userInfo.userName,\r\n                error: null\r\n            };\r\n        case LOGOUT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isAuth: false,\r\n                userId: null,\r\n                userName: null,\r\n                error: null\r\n            };\r\n        case CHECK_IS_AUTH:\r\n            if (action.status) {\r\n                return {\r\n                    ...state,\r\n                    isAuth: action.status,\r\n                    error: null\r\n                };\r\n            } else return {\r\n                ...state,\r\n                isAuth: action.status,\r\n                error: action.message\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default authorisationReducer;","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { reducer as formReducer } from \"redux-form\";\r\nimport reducer from '../game/reducer'\r\nimport authorisationReducer from \"../authorisation/authReducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    reducer: reducer,\r\n    auth: authorisationReducer,\r\n    form: formReducer\r\n});\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>;\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunkMiddleware)));\r\n\r\nexport default store;","import React from 'react';\r\nimport style from './Header.module.css';\r\n\r\ninterface I_props {\r\n    turns: number\r\n    alert?: string | null\r\n    isAuth: boolean\r\n    logOut: () => void\r\n    resetCount: () => void\r\n}\r\n\r\nfunction Header(props: I_props) {\r\n\r\n    return (\r\n        <header className={style.headerWrapper}>\r\n            {props.isAuth && <div className={style.navContainer}>\r\n                <div onClick={props.resetCount}>\r\n                    <div className={style.item}>\r\n                        Exit\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <div className={style.item} onClick={props.logOut}>\r\n                        LogOut\r\n                    </div>\r\n                </div>\r\n            </div>}\r\n            {props.alert ? <span>{props.alert}</span> :\r\n                <div className={style.inform}>\r\n                    <span>Turns</span>\r\n                    <span>{props.turns}</span>\r\n                </div>\r\n            }\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","export const required = (value: any) => value ? undefined : 'Required';\r\n\r\nexport const maxLength = (max: any) => (value: any) =>\r\n    value && value.length > max ? `Must be ${max} characters or less` : undefined;\r\n\r\nexport const minLength = (min: any) => (value: any) =>\r\n    value && value.length < min ? `Must be ${min} characters or less` : undefined;\r\n\r\nexport const minLength4 = minLength(4);\r\n\r\nexport const maxLength15 = maxLength(15);\r\n","import React from 'react';\r\nimport style from './Footer.module.css';\r\n\r\n\r\nconst Footer = () => {\r\n\r\n    return (\r\n        <footer>\r\n            <div className={style.footerWrapper}>\r\n                <div className={style.container}>\r\n                    <div className={style.containerRow}>\r\n                        <div className={style.containerCol}>\r\n                            <h4>\r\n                                CREATED BY\r\n                            </h4>\r\n                            <p>Constantine Kostka</p>\r\n                            <p>г. Минск, ул. Козлова, д. 35</p>\r\n                            <p>https://github.com/Benedikt89</p>\r\n\r\n                        </div>\r\n                        <div className={style.containerCol}>\r\n\r\n                            <h4>\r\n                                КОНТАКТЫ\r\n                            </h4>\r\n                            <p>Телефон: +375 29 3743228</p>\r\n                            <p>Телефон: +375 33 6858121</p>\r\n                            <p>E-mail: constantine.kostka@gmail.com</p>\r\n                            <p>Сайт: https://benedikt89.github.io/portfolio/</p>\r\n\r\n                        </div>\r\n                    </div>\r\n                    <div className={style.containerRow}>\r\n                    </div>\r\n                    <div className={style.container}>\r\n                        <span>© 2019 Copyright: constantine</span>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n        </footer>\r\n    )\r\n};\r\n\r\nexport default Footer;","import {AppStateType} from \"../redux/store\";\r\n\r\nexport const getFields = (state:AppStateType) => state.reducer.fields;\r\nexport const getTurns = (state:AppStateType) => state.reducer.turns;\r\nexport const getCurrentTurn = (state:AppStateType) => state.reducer.currentTurn;\r\nexport const getIsFetching = (state:AppStateType) => state.reducer.isFetching;\r\nexport const getIsFrozen = (state:AppStateType) => state.reducer.isFrozen;\r\nexport const getWinner = (state:AppStateType) => state.reducer.winner;\r\nexport const getAppError = (state:AppStateType) => state.reducer.error;\r\n\r\nexport const getScore = (state:AppStateType) => {\r\n    return {player1Score: state.reducer.player1Score, player2Score: state.reducer.player2Score}\r\n};","import React from 'react';\r\nimport style from './FieldElement.module.css'\r\nimport classNames from 'classnames/bind';\r\nimport crossImg from './../../assets/icons/cross.svg'\r\nimport zeroImg from './../../assets/icons/zero.svg'\r\nimport {I_fieldItem, I_winner} from \"../../types/types\";\r\n\r\ninterface I_Props {\r\n    field: I_fieldItem\r\n    winner: I_winner,\r\n    isFrozen: boolean\r\n    onUserTurn: (pressedField: I_fieldItem) => void,\r\n}\r\n\r\nclass GameField extends React.Component<I_Props> {\r\n    state = {\r\n        socketBlur: false,\r\n        clickSuccess: false,\r\n    };\r\n\r\n//bluring buttons after click to inform user about successful result or not\r\n    clickTimeoutActive = () => {\r\n        this.setState({socketBlur: true}, ()=>{\r\n            setTimeout(() => {this.setState({socketBlur: false, clickSuccess: false})}, 500)\r\n        })\r\n    };\r\n\r\n    render() {\r\n        let cx = classNames.bind(style);\r\n\r\n        //Style for Bg Image\r\n        let bgImage = () => {\r\n            if (this.props.field.status === 'CROSS') {\r\n                return crossImg\r\n            } else if (this.props.field.status === \"ZERO\") {\r\n                return zeroImg\r\n            } else {\r\n                return '';\r\n            }\r\n        };\r\n\r\n        // Styles for fields depends from user activity\r\n        let classNameForWrapper = cx(style.buttonWrapper, {\r\n            success: this.state.socketBlur && this.state.clickSuccess,\r\n            error: this.props.field.status && this.state.socketBlur && !this.state.clickSuccess,\r\n            winHorisontal: this.props.field.usedInWin === 'HORIZONTAL',\r\n            winVertical: this.props.field.usedInWin === 'VERTICAL',\r\n            win90deg: this.props.field.usedInWin === 'DRAW+90',\r\n            winMinus90deg: this.props.field.usedInWin === 'DRAW-90',\r\n        });\r\n\r\n        let classNameCell = cx(style.itemCell,{\r\n            cross: this.props.field.status === 'CROSS',\r\n            zero: this.props.field.status === 'ZERO',\r\n        });\r\n        //function react on click\r\n        let clickable = () => {\r\n            //If user can click on socket\r\n            if(!this.props.isFrozen && !this.props.field.status){\r\n                this.setState({clickSuccess: true})\r\n            }\r\n            //Calling timeout function to blur socket\r\n            this.clickTimeoutActive();\r\n\r\n            if (!this.props.field.status && !this.props.winner && !this.props.isFrozen) {\r\n                this.props.onUserTurn(this.props.field);\r\n            }\r\n        };\r\n\r\n        return (\r\n            <div onClick={clickable} className={classNameForWrapper}>\r\n                <div\r\n                    className={classNameCell}>\r\n                    <img alt={this.props.field.status ? this.props.field.status : ''} src={bgImage()}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GameField;","import React from \"react\";\r\nimport {I_scoreData} from \"../../types/types\";\r\nimport style from './../Main.module.css';\r\n\r\ninterface I_props {\r\n    title?: string,\r\n    score: I_scoreData,\r\n    closePopUp: () => void\r\n}\r\n\r\nconst PopUpScore = ({title, score, closePopUp}: I_props) => {\r\n    return (\r\n        <div className={style.popUpWrapper} onClick={closePopUp}>\r\n            {title && <span  onClick={closePopUp}>{title}</span>}\r\n            <span>wins: {score.winsScore}</span>\r\n            <span>fails: {score.failsScore}</span>\r\n            <span>draws: {score.drawsScore}</span>\r\n        </div>\r\n    )\r\n};\r\nexport default PopUpScore","import React, {useState} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport {I_fieldItem, I_scoreData, I_winner} from \"../../types/types\";\r\nimport {getCurrentTurn, getFields, getIsFrozen, getScore, getWinner} from \"../../game/selectors\";\r\nimport {onUserMove, resetCount} from \"../../game/actions\";\r\nimport GameField from \"./FieldElement\";\r\nimport crossImg from './../../assets/icons/cross.svg'\r\nimport zeroImg from './../../assets/icons/zero.svg'\r\nimport style from './../Main.module.css'\r\nimport PopUpScore from \"./PopUp\";\r\n\r\ninterface I_props {\r\n    title?: string\r\n}\r\n\r\ninterface I_connectedProps {\r\n    fields: Array<I_fieldItem>,\r\n    winner: I_winner,\r\n    isFrozen: boolean,\r\n    currentTurn: string | null\r\n    score: {\r\n        player1Score: I_scoreData,\r\n        player2Score: I_scoreData,\r\n    }\r\n}\r\n\r\ninterface I_dispatchedProps {\r\n    onUserMove: (pressedField: I_fieldItem) => void,\r\n    resetCount: () => void\r\n}\r\n\r\ninterface I_mainProps extends I_connectedProps, I_dispatchedProps, I_props {\r\n}\r\n\r\nconst GameScreen = ({fields, isFrozen, onUserMove, winner, resetCount, currentTurn, score, title}: I_mainProps) => {\r\n    //Displaying cells\r\n    let [isPopUpOpen, setPopUpOpen] = useState('');\r\n\r\n    let gameButtons = fields.map((f: I_fieldItem, index: number) =>\r\n        <GameField\r\n            key={index}\r\n            winner={winner}\r\n            isFrozen={isFrozen}\r\n            onUserTurn={onUserMove}\r\n            field={f}\r\n        />);\r\n\r\n    let showStats = (val: string) => {\r\n        setPopUpOpen(val);\r\n    };\r\n\r\n    let bgImage = () => currentTurn === 'CROSS' ? crossImg : zeroImg;\r\n\r\n    return (\r\n        <div className={style.fieldSizeWrapper}>\r\n\r\n            {title &&\r\n            <h1 onClick={resetCount} className={style.win}>\r\n                {title}\r\n            </h1>}\r\n            {winner &&\r\n            <h2 onClick={resetCount} className={style.win}>\r\n                {winner === \"DRAW\" ? 'Nobody' : winner} is winner, click here to reset\r\n            </h2>}\r\n            {!winner && <h2>TIC-TAC-TOE</h2>}\r\n\r\n            {!winner && <div className={style.row}>\r\n                <span>Current turn :</span>\r\n                <img className={style.icon} src={bgImage()}  alt={bgImage()}/>\r\n            </div>}\r\n\r\n            <div className={style.row}>\r\n                <span className={style.scoreButton}>\r\n                    <div onClick={() => {\r\n                        showStats('CROSS')\r\n                    }}>\r\n                        Player Info <b>{score.player1Score.winsScore}</b>\r\n                    </div>\r\n                    {isPopUpOpen === 'CROSS' &&\r\n                    <PopUpScore\r\n                        score={score.player1Score}\r\n                        title={'Player'}\r\n                        closePopUp={() => {\r\n                            showStats('')\r\n                        }}\r\n                    />}\r\n                </span>\r\n                <span className={style.scoreButton}>\r\n                    <div onClick={() => {\r\n                        showStats('ZERO')\r\n                    }}>\r\n                        AI Info <b>{score.player2Score.winsScore}</b>\r\n                    </div>\r\n                    {isPopUpOpen === 'ZERO' &&\r\n                    <PopUpScore\r\n                        score={score.player2Score}\r\n                        title={'AI'}\r\n                        closePopUp={() => {\r\n                            showStats('')\r\n                        }}\r\n                    />}\r\n                </span>\r\n            </div>\r\n\r\n            <div className={style.gameWrapper}>\r\n                <div className={style.oneToOneSizer}>\r\n                <div className={style.gameGrid}>\r\n                    {gameButtons}\r\n                </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: AppStateType): I_connectedProps => {\r\n    return {\r\n        fields: getFields(state),\r\n        winner: getWinner(state),\r\n        isFrozen: getIsFrozen(state),\r\n        currentTurn: getCurrentTurn(state),\r\n        score: getScore(state)\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, {onUserMove, resetCount})(GameScreen);","import {ThunkDispatch} from \"redux-thunk\";\r\nimport {_fetchSuccess, _setError, _toggleIsFetching, I_actions} from \"./actions\";\r\nimport {checkIsAuth} from \"../authorisation/actions\";\r\nimport {gameDataApi} from \"./api\";\r\nimport {AppStateType} from \"../redux/store\";\r\n\r\ntype GetStateType = () => AppStateType\r\n//API ACTIONS\r\nexport const fetchGameData = () =>\r\n    async (dispatch: ThunkDispatch<{}, {}, I_actions>) => {\r\n        try {\r\n            dispatch(_toggleIsFetching(true));\r\n            let auth = dispatch(checkIsAuth());\r\n            let resAsString = await gameDataApi.fetchData();\r\n            await Promise.all([auth, resAsString]);\r\n            let data = null;\r\n            // checking if data is a string\r\n            if (resAsString.length > 0) {\r\n                return typeof resAsString === \"string\" ? data = JSON.parse(resAsString) : resAsString;\r\n            }\r\n            if (data) dispatch(_fetchSuccess(data));\r\n            else if (resAsString.turns && resAsString.fields.length === 9) {\r\n                dispatch(_fetchSuccess(resAsString));\r\n            }\r\n            dispatch(_setError(null));\r\n            dispatch(_toggleIsFetching(false));\r\n        } catch (err) {\r\n            console.log(err);\r\n            //if its no data return\r\n            if (err.response && err.response.config.url === \"api.user.getstate\" && err.response.status === 403) {\r\n                dispatch(_toggleIsFetching(false));\r\n                dispatch(_setError(null));\r\n            } else {\r\n                dispatch(_setError('network Problems'));\r\n                dispatch(_toggleIsFetching(false));\r\n            }\r\n        }\r\n    };\r\nexport const postGameData = () =>\r\n    async (dispatch: ThunkDispatch<{}, {}, I_actions>, getState: GetStateType) => {\r\n        try {\r\n            let state = getState().reducer;\r\n            let data = {\r\n                fields: state.fields,\r\n                player1Score: state.player1Score,\r\n                player2Score: state.player2Score,\r\n                turns: state.turns,\r\n                winner: state.winner\r\n            };\r\n            //stringify data before sending\r\n            let dataAsString = JSON.stringify(data);\r\n            let res = await gameDataApi.postData(dataAsString);\r\n            console.log(res);\r\n            //if it was some errors remove them\r\n            dispatch(_setError(null));\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    };","import {AppStateType} from \"../redux/store\";\r\n\r\nexport const getIsAuth = (state:AppStateType) => state.auth.isAuth;\r\n","import React from 'react';\r\nimport style from '../FormControl.module.css';\r\n\r\nexport interface I_renderFieldProps {\r\n    input:any\r\n    label: string\r\n    type: string\r\n    meta: any\r\n}\r\n\r\nexport const renderField = ({input, label, type, meta: {touched, error, warning}}:I_renderFieldProps) => {\r\n    let classForField = () => {\r\n        if(touched) {\r\n            return style.fieldWrapper + ' ' + (error && touched ? style.error : style.success)\r\n        } else {\r\n            return style.fieldWrapper;\r\n        }\r\n    };\r\n    return (\r\n    <div>\r\n        <label>{label}</label>\r\n        <div className={classForField()}>\r\n            <input {...input} type={type}/>\r\n            {touched &&\r\n            ((error && <span className={style.errorMessage}>{error}</span>)\r\n                || (warning && <span className={style.errorMessage}>{warning}</span>))}\r\n        </div>\r\n    </div>\r\n)};\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport style from './FormControl.module.css';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {renderField} from \"./FormElements/FormsControls\";\r\nimport {maxLength15, minLength4, required} from \"./FormElements/validators\";\r\n\r\nconst LoginUserForm = ({handleSubmit, pristine, submitting, error}: any) => {\r\n\r\n    return (\r\n        <form className={style.formControl} onSubmit={handleSubmit}>\r\n            <Field name=\"username\"\r\n                   type=\"text\"\r\n                   component={renderField}\r\n                   label=\"Имя Пользователя\"\r\n                   validate={[required, minLength4, maxLength15]}\r\n            />\r\n            <Field name=\"password\"\r\n                   type=\"password\"\r\n                   component={renderField}\r\n                   label=\"Пароль\"\r\n                   validate={[required, minLength4]}\r\n            />\r\n            {error && <span className={style.mainErrorMessage}>{error}</span>}\r\n\r\n            <button type=\"submit\" disabled={pristine || submitting}>Log In</button>\r\n        </form>\r\n    )\r\n};\r\nexport default reduxForm({form: 'logIn'})(LoginUserForm)","import React from \"react\";\r\nimport style from '../Main.module.css';\r\nimport LoginUserForm from \"./LoginForm\";\r\nimport {I_logInData} from \"../../authorisation/actions\";\r\n\r\ninterface I_LoginPage {\r\n    logIn: (data: I_logInData)=> void\r\n}\r\nconst LoginPage = ({logIn}:I_LoginPage) => {\r\n    const onUserSubmit = (formData: any) => {\r\n        logIn({username: formData.username, password: formData.password})\r\n    };\r\n\r\n    return (\r\n        <div className={style.container}>\r\n            <LoginUserForm onSubmit={onUserSubmit}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default LoginPage;","import React from 'react';\r\nimport preloader from \"../../assets/images/Spinner.svg\";\r\n\r\nlet Preloader = () => {\r\n    return (\r\n        <div style={{\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            display: 'flex',\r\n            height: '100%',\r\n            width: '100%'\r\n        }}>\r\n            <img src={preloader} alt={\"Preloader Spinner\"}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Preloader;","import React, {Component} from 'react';\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport Header from \"./Header/Header\";\r\nimport Footer from \"./Footer/Footer\";\r\nimport {AppStateType} from \"../redux/store\";\r\nimport '../App.css';\r\nimport style from './Main.module.css';\r\nimport {fetchGameData} from \"../game/api-actions\";\r\nimport GameScreen from \"./Game/gameScreen\";\r\nimport {getAppError, getIsFetching, getTurns} from \"../game/selectors\";\r\nimport {checkIsAuth, logIn, logOut} from \"../authorisation/actions\";\r\nimport {getIsAuth} from \"../authorisation/selectors\";\r\nimport LoginPage from \"./Login/Login\";\r\nimport Preloader from \"./Common/Preloader\";\r\nimport {resetCount, setDemoMode} from \"../game/actions\";\r\n\r\ninterface I_props {\r\n    title?: string\r\n}\r\n\r\ninterface I_connectedProps {\r\n    isAuth: boolean,\r\n    turns: number\r\n    error: string | null\r\n    appError: string | null\r\n    isFetching: boolean\r\n    demomode: boolean\r\n}\r\n\r\ninterface I_dispatchedProps {\r\n    fetchGameData: () => void\r\n    logOut: () => void\r\n    logIn: (data: any) => void\r\n    checkIsAuth: () => void\r\n    resetCount: () => void\r\n    setDemoMode: (status: boolean) => void\r\n}\r\n\r\ninterface I_MainProps extends I_props, I_connectedProps, I_dispatchedProps, RouteComponentProps<{}> {\r\n}\r\n\r\nclass Main extends Component<I_MainProps> {\r\n\r\n    componentDidMount() {\r\n        this.props.fetchGameData();\r\n    }\r\n    componentDidUpdate(prevProps: Readonly<I_MainProps>, prevState: Readonly<{}>, snapshot?: any): void {\r\n        //retrying connect to server\r\n        if (this.props.appError && !this.props.demomode) {\r\n            setTimeout(() => { this.props.fetchGameData()}, 20000)\r\n        }\r\n        //fetch after login\r\n        if (this.props.isAuth !== prevProps.isAuth) {\r\n            this.props.fetchGameData();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let {turns, error, isAuth, logOut, appError, isFetching, logIn, resetCount, demomode, setDemoMode} = this.props;\r\n        return (\r\n            <div>\r\n                <Header turns={turns} alert={error} isAuth={isAuth} logOut={logOut} resetCount={resetCount}/>\r\n                {!appError ? <div className={style.mainWrapper}>\r\n                    {!isFetching ?\r\n                        isAuth ?\r\n                            <GameScreen />\r\n                            :\r\n                            <LoginPage logIn={logIn}/>\r\n                        :\r\n                        <Preloader />\r\n                    }\r\n                </div> :\r\n                    <div className={style.mainWrapper}>\r\n                        <h2 className={style.warning}>{appError}</h2>\r\n                        {demomode && <GameScreen title={\"DEMO MODE\"}/>}\r\n                        {!demomode ?\r\n                            <button className={style.alertBtn} onClick={() => {setDemoMode(true)}}>\r\n                                TRY DEMO\r\n                            </button> :\r\n                            <button className={style.alertBtn} onClick={() => {setDemoMode(false)}}>\r\n                                LEAVE DEMO\r\n                            </button>}\r\n                    </div>\r\n                }\r\n                <Footer/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): I_connectedProps => {\r\n    return {\r\n        isAuth: getIsAuth(state),\r\n        turns: getTurns(state),\r\n        error: state.auth.error,\r\n        appError: getAppError(state),\r\n        isFetching: getIsFetching(state),\r\n        demomode: state.reducer.demomode\r\n    }\r\n};\r\n\r\nlet ComposedComponent = connect(\r\n    mapStateToProps, {fetchGameData, logOut, checkIsAuth, logIn, resetCount, setDemoMode}\r\n    )(Main);\r\n\r\nexport default withRouter(ComposedComponent);","import React from 'react';\nimport {Provider} from \"react-redux\";\nimport {HashRouter} from \"react-router-dom\";\nimport store from \"./redux/store\";\nimport './App.css';\nimport Main from \"./components/Main\";\n\nconst App: React.FC = () => {\n  return (\n      <div className=\"App\">\n        <HashRouter basename={process.env.PUBLIC_URL}>\n          <Provider store={store}>\n            <Main />\n          </Provider>\n        </HashRouter>\n      </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footerWrapper\":\"Footer_footerWrapper__3R8jl\",\"container\":\"Footer_container__6KAwv App_container__NzRnC\",\"containerRow\":\"Footer_containerRow__1jz55 App_row__3FhQM App_container__NzRnC\",\"containerCol\":\"Footer_containerCol__1W5K4 App_container__NzRnC\",\"payment\":\"Footer_payment__2mPcn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerWrapper\":\"Header_headerWrapper__39FK7\",\"navContainer\":\"Header_navContainer__11Kdu\",\"inform\":\"Header_inform__1AG1d\",\"active\":\"Header_active__3ZwMv\",\"item\":\"Header_item__22i0k\"};","module.exports = __webpack_public_path__ + \"static/media/cross.18445307.svg\";","module.exports = __webpack_public_path__ + \"static/media/zero.03f0be9a.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonWrapper\":\"FieldElement_buttonWrapper__2t5Kz\",\"itemCell\":\"FieldElement_itemCell__2VUwz\",\"cross\":\"FieldElement_cross__16QIP\",\"zero\":\"FieldElement_zero__1-DCm\",\"success\":\"FieldElement_success__3rH3d\",\"error\":\"FieldElement_error__8zNzg\",\"winLine\":\"FieldElement_winLine__4JXBK\",\"winHorisontal\":\"FieldElement_winHorisontal__3lbvs\",\"winVertical\":\"FieldElement_winVertical__fJn9f\",\"win90deg\":\"FieldElement_win90deg__1r4IV\",\"winMinus90deg\":\"FieldElement_winMinus90deg__3R3XF\"};"],"sourceRoot":""}